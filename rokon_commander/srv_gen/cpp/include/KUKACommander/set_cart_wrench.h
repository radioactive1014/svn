/* Auto-generated by genmsg_cpp for file /home/intelligentrobotics/ws/orocos/KUKACommander/srv/set_cart_wrench.srv */
#ifndef KUKACOMMANDER_SERVICE_SET_CART_WRENCH_H
#define KUKACOMMANDER_SERVICE_SET_CART_WRENCH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Wrench.h"



namespace KUKACommander
{
template <class ContainerAllocator>
struct set_cart_wrenchRequest_ {
  typedef set_cart_wrenchRequest_<ContainerAllocator> Type;

  set_cart_wrenchRequest_()
  : wrench()
  {
  }

  set_cart_wrenchRequest_(const ContainerAllocator& _alloc)
  : wrench(_alloc)
  {
  }

  typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _wrench_type;
   ::geometry_msgs::Wrench_<ContainerAllocator>  wrench;


  typedef boost::shared_ptr< ::KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::KUKACommander::set_cart_wrenchRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct set_cart_wrenchRequest
typedef  ::KUKACommander::set_cart_wrenchRequest_<std::allocator<void> > set_cart_wrenchRequest;

typedef boost::shared_ptr< ::KUKACommander::set_cart_wrenchRequest> set_cart_wrenchRequestPtr;
typedef boost::shared_ptr< ::KUKACommander::set_cart_wrenchRequest const> set_cart_wrenchRequestConstPtr;



template <class ContainerAllocator>
struct set_cart_wrenchResponse_ {
  typedef set_cart_wrenchResponse_<ContainerAllocator> Type;

  set_cart_wrenchResponse_()
  {
  }

  set_cart_wrenchResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::KUKACommander::set_cart_wrenchResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct set_cart_wrenchResponse
typedef  ::KUKACommander::set_cart_wrenchResponse_<std::allocator<void> > set_cart_wrenchResponse;

typedef boost::shared_ptr< ::KUKACommander::set_cart_wrenchResponse> set_cart_wrenchResponsePtr;
typedef boost::shared_ptr< ::KUKACommander::set_cart_wrenchResponse const> set_cart_wrenchResponseConstPtr;


struct set_cart_wrench
{

typedef set_cart_wrenchRequest Request;
typedef set_cart_wrenchResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct set_cart_wrench
} // namespace KUKACommander

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::KUKACommander::set_cart_wrenchRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "806b3735eae05d4a43eff001f34992e5";
  }

  static const char* value(const  ::KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x806b3735eae05d4aULL;
  static const uint64_t static_value2 = 0x43eff001f34992e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "KUKACommander/set_cart_wrenchRequest";
  }

  static const char* value(const  ::KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Wrench wrench\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Wrench\n\
# This represents force in free space, separated into\n\
# its linear and angular parts.\n\
Vector3  force\n\
Vector3  torque\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::KUKACommander::set_cart_wrenchResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "KUKACommander/set_cart_wrenchResponse";
  }

  static const char* value(const  ::KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.wrench);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct set_cart_wrenchRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct set_cart_wrenchResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<KUKACommander::set_cart_wrench> {
  static const char* value() 
  {
    return "806b3735eae05d4a43eff001f34992e5";
  }

  static const char* value(const KUKACommander::set_cart_wrench&) { return value(); } 
};

template<>
struct DataType<KUKACommander::set_cart_wrench> {
  static const char* value() 
  {
    return "KUKACommander/set_cart_wrench";
  }

  static const char* value(const KUKACommander::set_cart_wrench&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "806b3735eae05d4a43eff001f34992e5";
  }

  static const char* value(const KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "KUKACommander/set_cart_wrench";
  }

  static const char* value(const KUKACommander::set_cart_wrenchRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "806b3735eae05d4a43eff001f34992e5";
  }

  static const char* value(const KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "KUKACommander/set_cart_wrench";
  }

  static const char* value(const KUKACommander::set_cart_wrenchResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // KUKACOMMANDER_SERVICE_SET_CART_WRENCH_H

