/* Auto-generated by genmsg_cpp for file /home/intelligentrobotics/ws/orocos/KUKACommander/srv/set_jnt_imp.srv */
#ifndef KUKACOMMANDER_SERVICE_SET_JNT_IMP_H
#define KUKACOMMANDER_SERVICE_SET_JNT_IMP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace KUKACommander
{
template <class ContainerAllocator>
struct set_jnt_impRequest_ {
  typedef set_jnt_impRequest_<ContainerAllocator> Type;

  set_jnt_impRequest_()
  : stiffness()
  , damping()
  {
    stiffness.assign(0.0);
    damping.assign(0.0);
  }

  set_jnt_impRequest_(const ContainerAllocator& _alloc)
  : stiffness()
  , damping()
  {
    stiffness.assign(0.0);
    damping.assign(0.0);
  }

  typedef boost::array<float, 7>  _stiffness_type;
  boost::array<float, 7>  stiffness;

  typedef boost::array<float, 7>  _damping_type;
  boost::array<float, 7>  damping;


  typedef boost::shared_ptr< ::KUKACommander::set_jnt_impRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::KUKACommander::set_jnt_impRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct set_jnt_impRequest
typedef  ::KUKACommander::set_jnt_impRequest_<std::allocator<void> > set_jnt_impRequest;

typedef boost::shared_ptr< ::KUKACommander::set_jnt_impRequest> set_jnt_impRequestPtr;
typedef boost::shared_ptr< ::KUKACommander::set_jnt_impRequest const> set_jnt_impRequestConstPtr;



template <class ContainerAllocator>
struct set_jnt_impResponse_ {
  typedef set_jnt_impResponse_<ContainerAllocator> Type;

  set_jnt_impResponse_()
  {
  }

  set_jnt_impResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::KUKACommander::set_jnt_impResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::KUKACommander::set_jnt_impResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct set_jnt_impResponse
typedef  ::KUKACommander::set_jnt_impResponse_<std::allocator<void> > set_jnt_impResponse;

typedef boost::shared_ptr< ::KUKACommander::set_jnt_impResponse> set_jnt_impResponsePtr;
typedef boost::shared_ptr< ::KUKACommander::set_jnt_impResponse const> set_jnt_impResponseConstPtr;


struct set_jnt_imp
{

typedef set_jnt_impRequest Request;
typedef set_jnt_impResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct set_jnt_imp
} // namespace KUKACommander

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::KUKACommander::set_jnt_impRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::KUKACommander::set_jnt_impRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::KUKACommander::set_jnt_impRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0d99cffe99f4e45e313ffa6bb7c0de4e";
  }

  static const char* value(const  ::KUKACommander::set_jnt_impRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0d99cffe99f4e45eULL;
  static const uint64_t static_value2 = 0x313ffa6bb7c0de4eULL;
};

template<class ContainerAllocator>
struct DataType< ::KUKACommander::set_jnt_impRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "KUKACommander/set_jnt_impRequest";
  }

  static const char* value(const  ::KUKACommander::set_jnt_impRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::KUKACommander::set_jnt_impRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[7] stiffness\n\
float32[7] damping\n\
\n\
";
  }

  static const char* value(const  ::KUKACommander::set_jnt_impRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::KUKACommander::set_jnt_impRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::KUKACommander::set_jnt_impResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::KUKACommander::set_jnt_impResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::KUKACommander::set_jnt_impResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::KUKACommander::set_jnt_impResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::KUKACommander::set_jnt_impResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "KUKACommander/set_jnt_impResponse";
  }

  static const char* value(const  ::KUKACommander::set_jnt_impResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::KUKACommander::set_jnt_impResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::KUKACommander::set_jnt_impResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::KUKACommander::set_jnt_impResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::KUKACommander::set_jnt_impRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stiffness);
    stream.next(m.damping);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct set_jnt_impRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::KUKACommander::set_jnt_impResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct set_jnt_impResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<KUKACommander::set_jnt_imp> {
  static const char* value() 
  {
    return "0d99cffe99f4e45e313ffa6bb7c0de4e";
  }

  static const char* value(const KUKACommander::set_jnt_imp&) { return value(); } 
};

template<>
struct DataType<KUKACommander::set_jnt_imp> {
  static const char* value() 
  {
    return "KUKACommander/set_jnt_imp";
  }

  static const char* value(const KUKACommander::set_jnt_imp&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<KUKACommander::set_jnt_impRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0d99cffe99f4e45e313ffa6bb7c0de4e";
  }

  static const char* value(const KUKACommander::set_jnt_impRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<KUKACommander::set_jnt_impRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "KUKACommander/set_jnt_imp";
  }

  static const char* value(const KUKACommander::set_jnt_impRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<KUKACommander::set_jnt_impResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0d99cffe99f4e45e313ffa6bb7c0de4e";
  }

  static const char* value(const KUKACommander::set_jnt_impResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<KUKACommander::set_jnt_impResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "KUKACommander/set_jnt_imp";
  }

  static const char* value(const KUKACommander::set_jnt_impResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // KUKACOMMANDER_SERVICE_SET_JNT_IMP_H

