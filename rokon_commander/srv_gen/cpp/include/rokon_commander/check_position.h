/* Auto-generated by genmsg_cpp for file /home/intelligentrobotics/ws/orocos/rokon_commander/srv/check_position.srv */
#ifndef ROKON_COMMANDER_SERVICE_CHECK_POSITION_H
#define ROKON_COMMANDER_SERVICE_CHECK_POSITION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace rokon_commander
{
template <class ContainerAllocator>
struct check_positionRequest_ {
  typedef check_positionRequest_<ContainerAllocator> Type;

  check_positionRequest_()
  : check()
  {
    check.assign(0.0);
  }

  check_positionRequest_(const ContainerAllocator& _alloc)
  : check()
  {
    check.assign(0.0);
  }

  typedef boost::array<double, 7>  _check_type;
  boost::array<double, 7>  check;


  typedef boost::shared_ptr< ::rokon_commander::check_positionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokon_commander::check_positionRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct check_positionRequest
typedef  ::rokon_commander::check_positionRequest_<std::allocator<void> > check_positionRequest;

typedef boost::shared_ptr< ::rokon_commander::check_positionRequest> check_positionRequestPtr;
typedef boost::shared_ptr< ::rokon_commander::check_positionRequest const> check_positionRequestConstPtr;



template <class ContainerAllocator>
struct check_positionResponse_ {
  typedef check_positionResponse_<ContainerAllocator> Type;

  check_positionResponse_()
  {
  }

  check_positionResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::rokon_commander::check_positionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokon_commander::check_positionResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct check_positionResponse
typedef  ::rokon_commander::check_positionResponse_<std::allocator<void> > check_positionResponse;

typedef boost::shared_ptr< ::rokon_commander::check_positionResponse> check_positionResponsePtr;
typedef boost::shared_ptr< ::rokon_commander::check_positionResponse const> check_positionResponseConstPtr;


struct check_position
{

typedef check_positionRequest Request;
typedef check_positionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct check_position
} // namespace rokon_commander

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rokon_commander::check_positionRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rokon_commander::check_positionRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rokon_commander::check_positionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "02f0fdb42b1c4bc12d4c1b2c9acdec60";
  }

  static const char* value(const  ::rokon_commander::check_positionRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x02f0fdb42b1c4bc1ULL;
  static const uint64_t static_value2 = 0x2d4c1b2c9acdec60ULL;
};

template<class ContainerAllocator>
struct DataType< ::rokon_commander::check_positionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rokon_commander/check_positionRequest";
  }

  static const char* value(const  ::rokon_commander::check_positionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rokon_commander::check_positionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[7] check\n\
\n\
\n\
";
  }

  static const char* value(const  ::rokon_commander::check_positionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rokon_commander::check_positionRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rokon_commander::check_positionResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rokon_commander::check_positionResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rokon_commander::check_positionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::rokon_commander::check_positionResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::rokon_commander::check_positionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rokon_commander/check_positionResponse";
  }

  static const char* value(const  ::rokon_commander::check_positionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rokon_commander::check_positionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::rokon_commander::check_positionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rokon_commander::check_positionResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rokon_commander::check_positionRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.check);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct check_positionRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rokon_commander::check_positionResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct check_positionResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rokon_commander::check_position> {
  static const char* value() 
  {
    return "02f0fdb42b1c4bc12d4c1b2c9acdec60";
  }

  static const char* value(const rokon_commander::check_position&) { return value(); } 
};

template<>
struct DataType<rokon_commander::check_position> {
  static const char* value() 
  {
    return "rokon_commander/check_position";
  }

  static const char* value(const rokon_commander::check_position&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rokon_commander::check_positionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "02f0fdb42b1c4bc12d4c1b2c9acdec60";
  }

  static const char* value(const rokon_commander::check_positionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rokon_commander::check_positionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rokon_commander/check_position";
  }

  static const char* value(const rokon_commander::check_positionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rokon_commander::check_positionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "02f0fdb42b1c4bc12d4c1b2c9acdec60";
  }

  static const char* value(const rokon_commander::check_positionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rokon_commander::check_positionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rokon_commander/check_position";
  }

  static const char* value(const rokon_commander::check_positionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROKON_COMMANDER_SERVICE_CHECK_POSITION_H

