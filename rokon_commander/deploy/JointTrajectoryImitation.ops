/**
 * Configuration and startup file for the KUKACommander
 * 
 * The purpose is to publish relevant information to ROS topics 
 */

// Load necessary components

import("rtt_rosnode")
import("ocl")
import("lwr_fri")
import("kuka_lwr_fri")
import("KUKACommander")
import("Execution")
import("KUKAInterface")

loadComponent("FRIServer", "lwr_fri::FRIServerRT")
loadComponent("KUKACommander", "iros::KUKACommander")
loadComponent("KUKACommanderROS", "iros::KUKACommanderROS")
loadComponent("ExecutionController", "iros::orocos::pbd::dmp::execution::Controller")
loadComponent("KUKAInterface", "iros::orocos::pbd::KUKAInterfaceJoints")


// HighestPriority = 99
// LowestPriority = 1


// Not periodic, highest priority, real-time scheduler
setActivity("FRIServer", 0, HighestPriority, ORO_SCHED_RT)
FRIServer.udp_port=49938



// Run timer each 10ms with lowest priority
//setActivity("Timer", 0.01, LowestPriority, ORO_SCHED_RT)
setActivity("KUKACommander", 0, 70, ORO_SCHED_RT)
setActivity("KUKACommanderROS", 0.01, 50, ORO_SCHED_RT)
setActivity("KUKAInterface", 0.01, 50, ORO_SCHED_RT)


addPeer("KUKACommanderROS", "KUKACommander")
addPeer("KUKAInterface", "KUKACommander")
addPeer("ExecutionController", "KUKAInterface")

// Standart connection policy
var ConnPolicy cp
cp.type = DATA

// Connection between FRIServer and KUKACommander
connect("FRIServer.fromKRL", "KUKACommander.fromKRL", cp)
connect("FRIServer.toKRL", "KUKACommander.toKRL", cp)

connect("FRIServer.FRIState", "KUKACommander.FRIState", cp)
connect("FRIServer.RobotState", "KUKACommander.RobotState", cp)

connect("FRIServer.desJntImpedance", "KUKACommander.desJntImpedance", cp)
connect("FRIServer.desCartImpedance", "KUKACommander.desCartImpedance", cp)

connect("FRIServer.msrJointState", "KUKACommander.msrJointState", cp)
connect("FRIServer.msrCartPos", "KUKACommander.msrCartPos", cp)
connect("FRIServer.msrExtCartWrench", "KUKACommander.msrExtCartWrench", cp)

connect("FRIServer.counter", "ExecutionController.counter", cp)

connect("KUKACommander.desiredJntPos", "FRIServer.desJntPos", cp)
connect("KUKACommander.desiredJntVel", "FRIServer.desJntVel", cp)
connect("KUKACommander.desiredCartPos", "FRIServer.desCartPos", cp)

connect("ExecutionController.desState", "KUKAInterface.desState", cp)
connect("KUKAInterface.msrState", "ExecutionController.msrState", cp)
connect("ExecutionController.desStartState", "KUKAInterface.start_state", cp)

connect("KUKAInterface.desPosition", "FRIServer.desJntPos", cp)
connect("FRIServer.msrJointState", "KUKAInterface.msrPosition", cp)

connect("KUKAInterface.prepared", "ExecutionController.in_prepared", cp)
connect("KUKAInterface.start_pos_reached", "ExecutionController.in_start_pos_reached", cp)


// Connect certain outputs with ROS topics for simple communication between Orocos and ROS

stream("KUKAInterface.desPositionROS", ros.topic("/iros/pbd/dmp/desPosition"))

stream("ExecutionController.out_prepared", ros.topic("/iros/pbd/dmp/execution/interface/prepared"))
stream("ExecutionController.out_finished", ros.topic("/iros/pbd/dmp/execution/interface/finished"))
stream("ExecutionController.out_start_pos_reached", ros.topic("/iros/pbd/dmp/execution/interface/start_pos_reached"))

stream("ExecutionController.prepare", ros.topic("/iros/pbd/dmp/execution/interface/prepare"))
stream("ExecutionController.start", ros.topic("/iros/pbd/dmp/execution/interface/start"))
stream("ExecutionController.stop", ros.topic("/iros/pbd/dmp/execution/interface/stop"))
stream("ExecutionController.startPosition", ros.topic("/iros/pbd/dmp/execution/interface/startPosition"))


// call configure
FRIServer.configure()
KUKACommander.configure()
KUKACommanderROS.configure()
KUKAInterface.configure()
ExecutionController.configure()


// Start the server
FRIServer.start()
KUKACommander.start()
KUKACommanderROS.start()
KUKAInterface.start()
ExecutionController.start()
