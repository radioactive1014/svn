/**
 * Configuration and startup file for the KUKACommander and KUKACommanderROS
 * 
 * The purpose is to publish relevant information to ROS topics 
 */

// Load necessary components

import("rtt_rosnode")
import("lwr_fri")
import("kuka_lwr_fri")
import("rokon_commander")

//import("naxes_motion_control")



loadComponent("FRIServer", "lwr_fri::FRIServerRT")
loadComponent("KUKACommander", "iros::KUKACommander")
loadComponent("KUKACommanderROS", "iros::KUKACommanderROS")

loadComponent("KUKACommanderROS", "iros::KUKACommanderROS")


//loadComponent("nAxesController", "MotionControl::nAxesControllerPos")
loadComponent("commander", "iros::Commander")


//loadService("nAxesController", "marshalling")



// HighestPriority = 99
// LowestPriority = 1


// Not periodic, highest priority, real-time scheduler
//setActivity("FRIServer", 0.0001, HighestPriority, ORO_SCHED_RT)


setActivity("FRIServer", 0.05, HighestPriority, ORO_SCHED_RT)
FRIServer.udp_port=49938

setActivity("commander", 0.05, HighestPriority, ORO_SCHED_RT)



// Run timer each 10ms with lowest priority
setActivity("KUKACommander", 0.01, 70, ORO_SCHED_RT)  //original

setActivity("KUKACommanderROS", 0.001, 50, ORO_SCHED_RT)

//setActivity("nAxesController", 0, 50, ORO_SCHED_RT)


addPeer("KUKACommanderROS", "KUKACommander")

// Standart connection policy
var ConnPolicy cp
cp.type = DATA  // original 



//cp.size =10    //added 
//cp.lock_policy = LOCK_FREE

// Connection between FRIServer and KUKACommander

connect("FRIServer.msrVecJointState", "KUKACommander.vector_position", cp)





connect("FRIServer.fromKRL", "KUKACommander.fromKRL", cp)
connect("FRIServer.toKRL", "KUKACommander.toKRL", cp)

connect("FRIServer.FRIState", "KUKACommander.FRIState", cp)
connect("FRIServer.RobotState", "KUKACommander.RobotState", cp)

connect("FRIServer.desJntImpedance", "KUKACommander.desJntImpedance", cp)
connect("FRIServer.desCartImpedance", "KUKACommander.desCartImpedance", cp)

//connect("FRIServer.msrJointState", "KUKACommander.msrJointState", cp)

//connect("FRIServer.msrJointState", "nAxesController.JointState", cp)

connect("FRIServer.msrCartPos", "KUKACommander.msrCartPos", cp)
connect("FRIServer.msrExtCartWrench", "KUKACommander.msrExtCartWrench", cp)

connect("commander.desJntPos", "FRIServer.desJntPos", cp)

//connect("nAxesController.nAxesOutputVelocity", "FRIServer.desJntVel", cp)

connect("KUKACommander.desiredJntVel", "FRIServer.desJntVel", cp)
connect("KUKACommander.desiredCartPos", "FRIServer.desCartPos", cp)
connect("KUKACommander.desCartForce", "FRIServer.desAddTcpWrench", cp)
connect("KUKACommander.desJntForce", "FRIServer.desAddJntTrq", cp)
connect("KUKACommander.check_position", "KUKACommanderROS.check_pos", cp)



connect("KUKACommander.check_position_Ros", "KUKACommanderROS.check_pos_Ros", cp)


// Connect certain outputs with ROS topics for simple communication between Orocos and ROS
//
//stream("KUKACommander.send", ros.topic("cha")) 

//stream("nAxesController.nAxesDesiredPosition", ros.topic("cha")) 


//stream("FRIServer.timestamp", ros.topic("/iros/pbd/timestamp")) 

stream("commander.fromRos", ros.topic("/chatter")) 

stream("KUKACommander.desiredJntPosIn", ros.topic("jp")) 

stream("FRIServer.timestamp", ros.topic("skjj")) 

stream("FRIServer.fromKRL", ros.topic("/iros/pbd/dmp/JointPos"))
stream("FRIServer.msrJointState", ros.topic("/iros/pbd/dmp/JointPos")) 
stream("FRIServer.msrCartPos", ros.topic("/iros/pbd/dmp/CartPose")) 
stream("FRIServer.msrExtCartWrench", ros.topic("/iros/pbd/dmp/CartWrench"))
stream("FRIServer.msrExtJointTorque", ros.topic("/iros/pbd/dmp/JointTorques"))



 
// call configure
FRIServer.configure()
KUKACommander.configure()
KUKACommanderROS.configure()
commander.configure()
//nAxesController.configure()




// Start the server
FRIServer.start()
KUKACommander.start()
KUKACommanderROS.start()
commander.start()

//nAxesController.start()
